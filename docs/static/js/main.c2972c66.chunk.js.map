{"version":3,"sources":["serviceWorker.js","day1/First.js","day1/Second.js","day1/Fourth.js","day1/Third.js","index.js"],"names":["Boolean","window","location","hostname","match","React","Component","Fourth","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","title","dataList","_this2","setInterval","updateDataListState","newState","map","item","setState","elementList","ielem","index","react_default","a","createElement","key","toString","className","element","src_day1_Fourth","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oRAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2GCfcC,IAAMC,gBCCLD,IAAMC,gBCsCZC,SCvCKF,IAAMC,4BDEtB,SAAAC,EAAYC,GAAM,IAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,GAAA,OACdE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAGDQ,MAAQ,CAACC,MAAU,WAAYC,SADxB,CAAC,EAAG,EAAG,EAAG,EAAG,IAHXT,mFAQE,IAAAU,EAAAP,KAChBQ,YAAY,WAAKD,EAAKE,uBAAwB,mDAK9C,IAAIC,EAAWV,KAAKI,MAAME,SAASK,IAAI,SAACC,GACpC,OAAOA,EAAO,IAGlBZ,KAAKa,SAAS,CAACP,SAAaI,qCAK5B,IAAMI,EAAcd,KAAKI,MAAME,SAASK,IAAI,SAACI,EAAOC,GAAR,OACxCC,EAAAC,EAAAC,cAAA,OAAKC,IAAKJ,EAAMK,YACXN,KAIT,OACIE,EAAAC,EAAAC,cAAA,OAAKG,UAAU,mCACVR,UAjCIrB,IAAMC,YEMrB6B,EAAUN,EAAAC,EAAAC,cAACK,EAAD,MAEhBC,IAASC,OAAOH,EAASI,SAASC,eAAe,SLsH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c2972c66.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport './First.css'\n\nclass First extends React.Component {\n\n    constructor(props){\n        super(props);\n        this.state = {\"COUNT\" : 0};\n    }\n\n\n    render(){\n        return (\n            <div className=\"full-screen make-center textify\">\n                HELLO REACT!!!\n            </div>\n        );\n    }\n}\n\nexport default First;","import React from 'react';\n\nimport './Second.css';\n\nclass Second extends React.Component{\n\n    constructor(props){\n        super(props);\n\n        this.state = {\"COUNTER\" : 0};\n    }\n\n    render(){\n        return (\n            <div className=\"full-screen make-center textify\">\n                COUNTER {this.state.COUNTER}\n            </div>\n        );\n    }\n}\n\n\nexport default Second;","import React from 'react';\nimport './Fourth.css';\n\nclass Fourth extends React.Component {\n\n    constructor(props){\n        super(props);\n\n        const arr = [1, 2, 3, 4, 5];\n        this.state = {\"title\" : \"Koderoom\", \"dataList\": arr};\n    }\n\n\n    componentDidMount() {\n        setInterval(()=>{this.updateDataListState()}, 1000);\n    }\n\n    updateDataListState() {\n\n        let newState = this.state.dataList.map((item)=>{\n            return item + 1;\n        });\n\n        this.setState({\"dataList\" : newState});\n    }\n\n\n    render(){\n        const elementList = this.state.dataList.map((ielem, index)=>\n            <div key={index.toString()}>\n                {ielem}\n            </div>\n        );\n\n        return (\n            <div className=\"full-screen make-center textify\">\n                {elementList}\n            </div>\n        );\n    }\n}\n\nexport default Fourth;","import React from 'react';\nimport './Third.css';\n\nclass Third extends React.Component {\n\n    constructor(props){\n        super(props);\n\n        this.state = {\"counter\" : 1};\n\n        this.increment = this.increment.bind(this);\n    }\n\n    componentDidMount() {\n        this.incInterval =  setInterval(()=>{this.increment();}, 1000);\n    }\n\n\n    componentWillUnmount() {\n        clearInterval(this.incInterval);\n    }\n\n    increment() {\n        // SYNC USE CASE\n        // const counter = this.state.counter + 1;\n        // this.setState({\"counter\" : counter});\n\n        // ASYNC USE CASE\n        this.setState((state, props)=>({\n            \"counter\" : state.counter + 1  \n        }));\n    }\n\n    render() {\n        return (\n            <div className=\"full-screen make-center textify\">\n                <span className=\"span make-center\">{this.state.counter}</span>\n                <button className=\"btn\" onClick={this.increment}>CLICK ME 1</button>\n                <button className=\"btn\" onClick={this.increment.bind(this)}>CLICK ME 2</button>\n                <button className=\"btn\" onClick={(e)=> {this.increment(e)}}>CLICK ME 3</button>\n            </div>\n        );\n    }\n\n}\n\nexport default Third;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nimport {Fourth} from './day1'\n\n\n\nconst element = <Fourth />;\n\nReactDOM.render(element, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}