{"version":3,"sources":["serviceWorker.js","day2/1.js","index.js"],"names":["Boolean","window","location","hostname","match","One","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","postList","allPostBox","map","ielem","index","react_default","a","createElement","_1_AppArea","key","toString","Fragment","_1_AppHeader","Container_default","fluid","React","Component","AppHeader","_this2","className","Row_default","Col_default","xs","name","defaultProps","AppArea","_this3","post","element","_1_One","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,0JCVeC,qBAEjB,SAAAA,EAAYC,GAAM,IAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,GAAA,OACdE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAGDQ,MAAQ,CAACC,SADG,CAAC,EAAG,EAAG,EAAG,EAAG,IAHhBR,wEAQd,IAAIS,EAAaN,KAAKI,MAAMC,SAASE,IAAI,SAACC,EAAOC,GAAR,OACrCC,EAAAC,EAAAC,cAACC,EAAD,CAASC,IAAKL,EAAMM,eAGxB,OACIL,EAAAC,EAAAC,cAACF,EAAAC,EAAMK,SAAP,KACIN,EAAAC,EAAAC,cAACK,EAAD,MAEAP,EAAAC,EAAAC,cAACM,EAAAP,EAAD,CAAWQ,OAAO,GACbb,WAnBYc,IAAMC,YA0BjCC,cACF,SAAAA,EAAY1B,GAAO,IAAA2B,EAAA,OAAAzB,OAAAC,EAAA,EAAAD,CAAAE,KAAAsB,IACfC,EAAAzB,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAwB,GAAAnB,KAAAH,KAAMJ,KACDQ,MAAQ,GAFEmB,wEAMf,OACIb,EAAAC,EAAAC,cAACM,EAAAP,EAAD,CAAWQ,OAAO,EAAMK,UAAU,QAC9Bd,EAAAC,EAAAC,cAACa,EAAAd,EAAD,CAAKa,UAAU,sBACXd,EAAAC,EAAAC,cAACc,EAAAf,EAAD,CAAKgB,GAAG,IAAIH,UAAU,mCACjBxB,KAAKJ,MAAMgC,MAEhBlB,EAAAC,EAAAC,cAACc,EAAAf,EAAD,CAAKgB,GAAG,eAbJP,IAAMC,WAoB9BC,EAAUO,aAAe,CACrBD,KAAS,eAKPE,cACF,SAAAA,EAAYlC,GAAM,IAAAmC,EAAA,OAAAjC,OAAAC,EAAA,EAAAD,CAAAE,KAAA8B,IACdC,EAAAjC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAgC,GAAA3B,KAAAH,KAAMJ,KACDQ,MAAQ,GAFC2B,wEAMd,OACIrB,EAAAC,EAAAC,cAACa,EAAAd,EAAD,CAAKa,UAAU,0CACXd,EAAAC,EAAAC,cAACc,EAAAf,EAAD,CAAKgB,GAAG,IAAIH,UAAU,yDACjBxB,KAAKJ,MAAMoC,cAVVZ,IAAMC,WAiB5BS,EAAQD,aAAe,CACnBG,KAAS,eCrEb,IAAMC,EAAUvB,EAAAC,EAAAC,cAACsB,EAAD,MAEhBC,IAASC,OAAOH,EAASI,SAASC,eAAe,SFsH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.37edfc60.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\n\nimport Container from 'react-bootstrap/lib/Container';\nimport Row from 'react-bootstrap/lib/Row';\nimport Col from 'react-bootstrap/lib/Col';\n\nimport './1.css';\n\nexport default class One extends React.Component {\n\n    constructor(props){\n        super(props);\n\n        const postList = [1, 2, 3, 4, 5];\n        this.state = {\"postList\" : postList};\n    }\n\n    render() {\n        let allPostBox = this.state.postList.map((ielem, index)=>\n            <AppArea key={index.toString()} />\n        );\n\n        return (\n            <React.Fragment>\n                <AppHeader />\n                \n                <Container fluid={true}>\n                    {allPostBox}\n                </Container>\n            </React.Fragment>\n        );\n    }\n}\n\nclass AppHeader extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {};\n    }\n\n    render() {\n        return (\n            <Container fluid={true} className=\"mb-1\">\n                <Row className=\"top-header bg-dark\">\n                    <Col xs=\"3\" className=\"make-left text-light text-ext-1\">\n                        {this.props.name}\n                    </Col>\n                    <Col xs=\"9\"></Col>\n                </Row>\n            </Container>\n        );\n    }\n}\n\nAppHeader.defaultProps = {\n    \"name\" : \"Affixus\"\n};\n\n\n\nclass AppArea extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {};\n    }\n\n    render(){\n        return (\n            <Row className=\"justify-content-center h-post-box mb-1\">\n                <Col xs=\"6\" className=\"bg-light rounded text-black-50 text-ext-2 make-center\">\n                    {this.props.post}\n                </Col>\n            </Row>\n        );\n    }\n}\n\nAppArea.defaultProps = {\n    \"post\" : \"React World\"\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport {One} from './day2'\n\nconst element = <One />;\n\nReactDOM.render(element, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}